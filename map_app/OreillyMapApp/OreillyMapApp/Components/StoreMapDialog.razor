@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if (isLoading)
        {
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <MudProgressCircular Color="Color.Warning" Style="height:170px;width:170px;" Indeterminate="true" />
                </MudItem>
            </MudGrid>
        }
        else
        {
            @if (selectedStore != null)
            {
                <MudCard Outlined="true">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@selectedStore.StoreName</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (!string.IsNullOrWhiteSpace(selectedStore.StoreUrl))
                            {
                                <MudIconButton Icon="@Icons.Material.Outlined.Home" Color="Color.Primary" Size="Size.Large" Link="@selectedStore.StoreUrl" Target="_blank" />
                            }
                            @if (!string.IsNullOrWhiteSpace(selectedStore.MapUrl))
                            {
                                <MudIconButton Icon="@Icons.Material.Outlined.AddLocation" Color="Color.Primary" Size="Size.Large" Link="@selectedStore.MapUrl" Target="_blank" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body1">@selectedStore.PostalCode @selectedStore.Address</MudText>
                        <MudText Typo="Typo.body2">@selectedStore.TelCode</MudText>
                    </MudCardContent>
                </MudCard>
            }
            <StoreMap @ref="map" OnStoreMarkerSelected="@OnStoreSelected" MapZoomLevel="13"></StoreMap>
        }
    </DialogContent>
</MudDialog>
@code {

    private StoreMap map;
    private bool isLoading = false;
    private Store selectedStore;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public List<Store> AllStores { get; set; }

    [Parameter] public Store CurrentStore { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = false;
            selectedStore = CurrentStore;
            StateHasChanged();
            await map.InitAsync(AllStores, CurrentStore.Position);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected void OnStoreSelected(Store store)
    {
        selectedStore = store;
    }
}